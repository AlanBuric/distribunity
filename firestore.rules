rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /email-subscriptions/{documents=**} {
    	allow read, write: if true;
    }
    
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /users/{id} {
      allow read, delete: if request.auth != null && request.auth.uid == id;
      allow create: if request.auth != null;
  		allow update: if request.auth != null && 
      (request.auth.uid == id || 
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['organizations']) && 
      isOrgRemovalFromOrgOwner());
    }
    
    match /organizations/{orgId} {
    	allow delete: if request.auth != null && get(resource.data.owner).id == request.auth.uid;
      allow update: if request.auth != null && 
      	(resource.data.owner.id == request.auth.uid || isLeavingOrganization());
    }
    
    function isLeavingOrganization() {
    	return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
	        request.resource.data.members.hasOnly([userDocRefFromAuth()]);
    }
    
    function isOrgRemovalFromOrgOwner() {
      let removedOrganizations = resource.data.organizations.removeAll(request.resource.data.organizations);

      return removedOrganizations.size() == 1 && 
        get(removedOrganizations[0]).owner == userDocRefFromAuth();
    }

    function userDocRefFromAuth() {
      return '/users/' + request.auth.uid;
    }

    function organizationDocRef() {
      return '/organizations/' + resource.data.organizations.id;
    }
  }
}